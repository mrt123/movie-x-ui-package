name: internal release
on:
  push:
    branches:
      - main

jobs:
  release:
    name: Release internal version
    runs-on: ubuntu-latest
    permissions:
      deployments: write # to update deployment status
      statuses: write # to update job status
      contents: write # to publish a GitHub release
      issues: write # to comment on released issues
      pull-requests: write # to comment on released pull requests
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.1"
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"
          # NOTE: Optional scope for authenticating against scoped registries.
          # Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
          # scope: '@custom-scope'
      - run: npm ci

      # NOTE: if npmPublish: false is set in release.config.js, only versioning of package.json and tagging will be performed
      - name: Create semantic release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
        # Notice: Since npm package is not physically published, steps.semantic.outputs.new_release_version won't be populated

      # no need to build, /dist will be provided

      # TODO: might replace separate publish step, and allow semantic release to publish
      # for publishing to github packages see: https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-nodejs-packages#publishing-packages-to-github-packages
      - name: publish internal npm package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: obtain new npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_UPLOADER_ACCESS_KEY }} # when given chance change these to : AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY in github (this way there will be no need to define them here)
          aws-secret-access-key: ${{ secrets.AWS_S3_UPLOADER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Deploy specific version to S3 bucket"
        run: |
          echo "deploying to https://d3mgsd0qc669bh.cloudfront.net/${{ steps.package-version.outputs.current-version}}"
          aws s3 sync ./dist s3://movies-dev-site/${{ steps.package-version.outputs.current-version }}/ --delete

      - name: "Deploy latest to S3"
        run: aws s3 sync ./dist s3://movies-dev-site/latest/ --delete
